/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OAUTH_H_RPCGEN
#define _OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct request_authorization_args {
	char *user_id;
	int auto_renew;
};
typedef struct request_authorization_args request_authorization_args;

struct request_auth_res {
	char *auth_token;
	char *error;
};
typedef struct request_auth_res request_auth_res;

struct approve_request_token_args {
	char *auth_token;
};
typedef struct approve_request_token_args approve_request_token_args;

struct SignedData {
	char *auth_token;
	char *files_and_perms;
};
typedef struct SignedData SignedData;

struct approve_request_token_res {
	SignedData signed_data;
	bool_t is_signed;
	char *error;
};
typedef struct approve_request_token_res approve_request_token_res;

struct request_access_token_args {
	char *user_id;
	SignedData signed_data;
	bool_t is_signed;
};
typedef struct request_access_token_args request_access_token_args;

struct request_access_token_res {
	char *access_token;
	char *refresh_token;
	int valability;
	char *error;
};
typedef struct request_access_token_res request_access_token_res;

struct validate_delegated_action_args {
	char *op_type;
	char *filename;
	char *access_token;
};
typedef struct validate_delegated_action_args validate_delegated_action_args;

struct refresh_access_token_res {
	char *error;
	char *refresh_token;
	char *access_token;
	int availability;
};
typedef struct refresh_access_token_res refresh_access_token_res;

struct refresh_access_token_args {
	char *refresh_token;
};
typedef struct refresh_access_token_args refresh_access_token_args;

#define AUTH_PROG 0x12321215
#define OAUTH 1

#if defined(__STDC__) || defined(__cplusplus)
#define request_authorization 1
extern  request_auth_res * request_authorization_1(request_authorization_args *, CLIENT *);
extern  request_auth_res * request_authorization_1_svc(request_authorization_args *, struct svc_req *);
#define approve_request_token 2
extern  approve_request_token_res * approve_request_token_1(approve_request_token_args *, CLIENT *);
extern  approve_request_token_res * approve_request_token_1_svc(approve_request_token_args *, struct svc_req *);
#define request_access_token 3
extern  request_access_token_res * request_access_token_1(request_access_token_args *, CLIENT *);
extern  request_access_token_res * request_access_token_1_svc(request_access_token_args *, struct svc_req *);
#define validate_delegated_action 4
extern  char ** validate_delegated_action_1(validate_delegated_action_args *, CLIENT *);
extern  char ** validate_delegated_action_1_svc(validate_delegated_action_args *, struct svc_req *);
#define refresh_access_token 5
extern  refresh_access_token_res * refresh_access_token_1(refresh_access_token_args *, CLIENT *);
extern  refresh_access_token_res * refresh_access_token_1_svc(refresh_access_token_args *, struct svc_req *);
extern int auth_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define request_authorization 1
extern  request_auth_res * request_authorization_1();
extern  request_auth_res * request_authorization_1_svc();
#define approve_request_token 2
extern  approve_request_token_res * approve_request_token_1();
extern  approve_request_token_res * approve_request_token_1_svc();
#define request_access_token 3
extern  request_access_token_res * request_access_token_1();
extern  request_access_token_res * request_access_token_1_svc();
#define validate_delegated_action 4
extern  char ** validate_delegated_action_1();
extern  char ** validate_delegated_action_1_svc();
#define refresh_access_token 5
extern  refresh_access_token_res * refresh_access_token_1();
extern  refresh_access_token_res * refresh_access_token_1_svc();
extern int auth_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_request_authorization_args (XDR *, request_authorization_args*);
extern  bool_t xdr_request_auth_res (XDR *, request_auth_res*);
extern  bool_t xdr_approve_request_token_args (XDR *, approve_request_token_args*);
extern  bool_t xdr_SignedData (XDR *, SignedData*);
extern  bool_t xdr_approve_request_token_res (XDR *, approve_request_token_res*);
extern  bool_t xdr_request_access_token_args (XDR *, request_access_token_args*);
extern  bool_t xdr_request_access_token_res (XDR *, request_access_token_res*);
extern  bool_t xdr_validate_delegated_action_args (XDR *, validate_delegated_action_args*);
extern  bool_t xdr_refresh_access_token_res (XDR *, refresh_access_token_res*);
extern  bool_t xdr_refresh_access_token_args (XDR *, refresh_access_token_args*);

#else /* K&R C */
extern bool_t xdr_request_authorization_args ();
extern bool_t xdr_request_auth_res ();
extern bool_t xdr_approve_request_token_args ();
extern bool_t xdr_SignedData ();
extern bool_t xdr_approve_request_token_res ();
extern bool_t xdr_request_access_token_args ();
extern bool_t xdr_request_access_token_res ();
extern bool_t xdr_validate_delegated_action_args ();
extern bool_t xdr_refresh_access_token_res ();
extern bool_t xdr_refresh_access_token_args ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OAUTH_H_RPCGEN */
